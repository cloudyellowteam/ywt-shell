#!/usr/bin/env bash
# shellcheck disable=SC2044,SC2155,SC2317
builder() {
    local CONTEXT="[BUILDER] " && readonly CONTEXT
    local CONFIG_EXPIRES_AT="${YWT_CONFIG_BUILDER_EXPIRES_AT:-"31/12/2999"}"
    local DIST=${2:-"${YWT_CONFIG_BUILDER_DIST:-"$(jq -r .path.dist <<<"$YWT_CONFIG")"}"}
    local SRC=${3:-"${YWT_CONFIG_BUILDER_SRC:-"$(jq -r .path.src <<<"$YWT_CONFIG")"}"}
    local BIN=$(jq -r .path.bin <<<"$YWT_CONFIG")
    _prepare() {
        [[ ! -d "$DIST" ]] && mkdir -p "${DIST}"
        rm -fR "${DIST:?}"/*
        [[ ! -d "$BIN" ]] && mkdir -p "${BIN}"
        if ! command -v shc &>/dev/null; then
            wysiwyg colorize "red" "$CONTEXT compiler is not installed, trying install" | logger warn
            apt-get install shc -y || return 1
        fi
        local SHC_INSTALLED && SHC_INSTALLED=$(command -v shc)
        [[ -z "$SHC_INSTALLED" ]] && wysiwyg colorize "red" "$CONTEXT compiler is not installed" | logger error && return 1
        wysiwyg colorize "green" "$CONTEXT Compiler is installed" | logger success
    }
    _cleanup() {
        local KEEP_SOURCE="${YWT_CONFIG_BUILDER_KEEP_SOURCE:-false}"
        [[ "$KEEP_SOURCE" == true ]] && echo "Keeping sources" | logger info && return 0
        rm -f "${DIST}/"*.sh | logger verbose
        rm -f "${DIST}/"*.c | logger verbose
        echo "Sources removed" | logger info
    }
    _stats() {
        local TARGET=${1:?}
        local EXPIRES_AT="${2:-$CONFIG_EXPIRES_AT}"
        local FILENAME && FILENAME=$(basename -- "$TARGET") && FILENAME="${FILENAME%.*}"
        local FILE="${DIST}/${FILENAME}.sh"
        [[ ! -f "$FILE" ]] && echo "$FILE is not a valid file" | logger error && return 0
        local STAT_FILE="${DIST}/${FILENAME}.stat"
        [[ -f "$STAT_FILE" ]] && rm -f "$STAT_FILE"
        touch "$STAT_FILE"
        {
            local IS_BINARY=false
            LC_ALL=C grep -a '[^[:print:][:space:]]' "$FILE" >/dev/null && IS_BINARY=true
            echo "{"
            echo "  \"file\": \"$FILE\","
            echo "  \"expires_at\": \"$EXPIRES_AT\","
            echo "  \"size\": \"$(du -h "$FILE" | awk '{print $1}')\","
            echo "  \"md5\": \"$(md5sum "$FILE" | awk '{print $1}')\","
            echo "  \"sha1\": \"$(sha1sum "$FILE" | awk '{print $1}')\","
            echo "  \"sha256\": \"$(sha256sum "$FILE" | awk '{print $1}')\","
            echo "  \"sha512\": \"$(sha512sum "$FILE" | awk '{print $1}')\"",
            echo "  \"created_at\": \"$(date -Iseconds)\"",
            echo "  \"binary\": $IS_BINARY"
            echo "}"
        } >>"$STAT_FILE"
        echo "Stat file created at $STAT_FILE" | logger success
        jq -Cc . <"$STAT_FILE" | logger verbose
    }
    build_file() {
        local FILE=$1
        [[ ! -f "$FILE" ]] && echo "$FILE is not a valid file" | logger error && return 0
        local EXPIRES_AT="${2:-$CONFIG_EXPIRES_AT}"
        local FILENAME && FILENAME=$(basename -- "$FILE") && FILENAME="${FILENAME%.*}"
        colorize "blue" "Building file ${FILE} valid until ${EXPIRES_AT}" | logger info
        # shc -r -f "${FILE}" -e "${EXPIRES_AT}"
        # cp -f "$FILE" "$DIST/$FILENAME.sh"          # .s = sh source
        # mv -f "${FILE}.x" "${BIN}/$FILENAME"        # .x = executable
        # mv -f "${FILE}.x.c" "${DIST}/$FILENAME.c"   # .c = c source
        # stats "$FILE" "$EXPIRES_AT"
        colorize "green" "Build done. run ${BIN}/${FILENAME}" | logger success
    }
    _bundle() {
        local SRC=${1:?}
        local EXPIRES_AT="${3:-$CONFIG_EXPIRES_AT}"
        [[ ! -d "$SRC" ]] && echo "${SRC} is not a valid directory" | logger error && return 0
        local MAIN && MAIN=$(find "$SRC" -type f -name ".rapd.sh" -or -name "main.sh" | head -n 1)
        [[ ! -f "$MAIN" ]] && echo "Invalid module main file, create a file ${YELLOW}<module>.rapd.sh${NC} in ${TARGET} folder" | logger from_buf error && return 0
        local BUNDLE_FILENAME && BUNDLE_FILENAME=$(basename -- "$MAIN")
        local BUNDLE_NAME="${BUNDLE_FILENAME%.*}"
        [[ "$BUNDLE_NAME" == "main" ]] && BUNDLE_NAME="rapd"
        [[ "$BUNDLE_NAME" != "rapd" ]] && BUNDLE_NAME="rapd.${BUNDLE_NAME}"
        local BUNDLE="${DIST}/${BUNDLE_NAME}"
        [[ -f "$BUNDLE" ]] && rm -f "$BUNDLE"
        touch "$BUNDLE"
        local LIB=${SRC}/lib
        [[ ! -d "$LIB" ]] && echo "${LIB} is not a valid directory" | logger error && return 0
        _inject() {
            local FILE="$1"
            [[ ! -f "$FILE" ]] && echo "$FILE is not a valid file" | logger error && return 0
            grep -v "^#" "$FILE" | grep -v "^$" | grep -v "^#!/usr/bin/env bash"
        }
        {
            echo "#!/bin/bash"
            echo "# YELLOW TEAM BUNDLE"
            echo "# $(jq -c .yellowteam <<<"$YWT_CONFIG")"
            echo "# This file is generated by yellowteam sdk builder. Do not edit this file"
            echo "# Build date: $(date -Iseconds)"
            echo "# Build ID: $(git rev-parse HEAD)"
            echo "# Build branch: $(git rev-parse --abbrev-ref HEAD)"
            echo "# Build tag: $(git describe --tags)"
            echo "# Build commit: $(git rev-parse --short HEAD)"
            echo "# Build author: $(git log -1 --pretty=format:'%an <%ae>')"
            echo "# Build message: $(git log -1 --pretty=format:'%s')"
            echo "# Build expires at: $CONFIG_EXPIRES_AT"
            while read -r FILE; do
                local FILENAME && FILENAME=$(basename -- "$FILE")
                local RELATIVE_PATH && RELATIVE_PATH=$(realpath --relative-to="$SRC" "$FILE")
                local RELATIVE_PATH && RELATIVE_PATH=$(dirname -- "$RELATIVE_PATH")
                echo "Packaging ${RELATIVE_PATH}/${FILENAME}" | logger debug
                {
                    echo -e "\n# start of $FILENAME\n" &&
                        grep -v "^#" <"$FILE"
                } >>"$BUNDLE"
                echo -e "\n# end of $FILENAME\n" >>"$BUNDLE"
            done < <(find "$LIB" -type f -name "*.ywt.sh" | sort)
            echo "Packaging ${GREEN}${MAIN}${NC}" | logger debug
            cat "$MAIN" >>"$BUNDLE"
            echo -e "\nrapd \"\$@\"" >>"$BUNDLE"
        } >>"$BUNDLE"
        cat "$BUNDLE"
    }
    _build_sdk() {
        local SDK=$(jq -r .path.sdk <<<"$YWT_CONFIG") && SRC=$(realpath -- "$SDK")
        _bundle "$SRC" && return 0
        _inject() {
            local FILE="$1"
            [[ ! -f "$FILE" ]] && echo "$FILE is not a valid file" | logger error && return 0
            grep -v "^#" "$FILE" | grep -v "^$" | grep -v "^#!/usr/bin/env bash"
        }
        
        logger info "${CONTEXT}Building sdk ($SRC)"
        _prepare
        local SDK_SRC_FILE="${SDK}/sdk.sh"
        [[ ! -f "$SDK_SRC_FILE" ]] && logger error "${CONTEXT}File $SDK_SRC_FILE not found" && return 1
        local SDK_LIB=$(jq -r .path.lib <<<"$YWT_CONFIG") && readonly SDK_LIB
        local SDK_DIST_FILE="${DIST}/sdk.sh"
        [[ -f "$SDK_DIST_FILE" ]] && rm -f "$SDK_DIST_FILE"
        {
            echo "#!/usr/bin/env bash"
            echo "# YELLOW TEAM SDK"
            echo "# $(jq -c .yellowteam <<<"$YWT_CONFIG")"
            echo "# This file is generated by yellowteam sdk builder. Do not edit this file"
            echo "# Build date: $(date -Iseconds)"
            echo "# Build ID: $(git rev-parse HEAD)"
            echo "# Build branch: $(git rev-parse --abbrev-ref HEAD)"
            echo "# Build tag: $(git describe --tags)"
            echo "# Build commit: $(git rev-parse --short HEAD)"
            echo "# Build author: $(git log -1 --pretty=format:'%an <%ae>')"
            echo "# Build message: $(git log -1 --pretty=format:'%s')"
            echo "# Build expires at: $CONFIG_EXPIRES_AT"
            while read -r FILE; do
                local FILE_NAME && FILE_NAME=$(basename -- "$FILE") && FILE_NAME="${FILE_NAME%.*}" && FILE_NAME=$(echo "$FILE_NAME" | tr '[:upper:]' '[:lower:]')
                [ ! -f "$FILE" ] && continue
                # shellcheck source=/dev/null # echo "source $FILE" 1>&2 &&
                _inject "$FILE"
            done < <(find "$SDK_LIB" -type f -name "*.ywt.sh" | sort)
            _inject "$SDK_SRC_FILE"
        } >>"$SDK_DIST_FILE"
        cat "$SDK_DIST_FILE"
    }
    inspect() {
        jq -r '.path' <<<"$YWT_CONFIG"
    }
    # if nnf "$@"; then return 0; fi
    nnf "$@" || usage "$?" "builder" "$@" && return 1
    return 0
}
(
    export -f builder
)
